Script started on Sat 17 Oct 2020 02:03:28 AM MST
[?1034hsh-4.2$ cat hwd4.c
#include <stdio.h>
#include <stdlib.h>

struct node
{
    int data;
    struct node* left;
    struct node* right;    
};

struct sNode
{
    struct node* t;
    struct sNode* next;
};

struct node *newNode(int item);
void push(struct sNode** top, struct node *t);
struct node *pop(struct sNode** top);
int isEmpty(struct sNode* top);
struct node* insert(struct node* node, int data);
void printPreorder(struct node* node);
void printInorder(struct node* node);
 
struct node *newNode(int item) 
{ 
    struct node *temp =  (struct node *)malloc(sizeof(struct node)); 
    temp->data = item; 
    temp->left = NULL;
    temp->right = NULL; 
    return temp; 
}

void push(struct sNode** top, struct node* t)
{
    struct sNode* new = (struct sNode*)malloc(sizeof(struct sNode));
    if(new == NULL)
    {
      perror("malloc failed");
    }
    else
    {
      new->t = t;
      new->next = *top;
      *top = new;
    }       
}

struct node *pop(struct sNode** top)
{
    if (isEmpty(*top))
      return NULL;
    struct node *r;
    struct sNode *temp;
    temp = *top;
    r = temp->t;
    *top = temp->next;
    free(temp);
    return r;
}

int isEmpty(struct sNode *top)
{
    if (top == NULL)
    return 1;
    else
    return 0;
}


struct node* insert(struct node* node, int data) 
{ 
    if (node == NULL) 
      return newNode(data);   
    if (data < node->data) 
        node->left  = insert(node->left, data); 
    else if (data > node->data) 
        node->right = insert(node->right, data);      
    return node; 
}

void printPreorder(struct node* node) 
{ 
     if (node == NULL) 
          return; 
     printf("%d ", node->data);     
     printPreorder(node->left); 
     printPreorder(node->right); 
}

void printInorder(struct node* node) 
{ 
     if (node == NULL) 
          return; 
     printInorder(node->left); 
     printf("%d ", node->data);     
     printInorder(node->right); 
}


int main()
{
    struct node* my;
    char opt;
    char value;
    while (opt != 'q' && opt!= 'Q') {
    printf("Enter choice (lower case is also acceptable) --- (I)nsert, (F)ind, (Q)uit: i");
    scanf("%c", &opt);
    if (opt = 'i' && opt = 'I')
    {
      printf("Enter new node's key value:\n");
      scanf("%c", &value);
      printf("Enter string of up to 10 characters for ''%c''s data:");
    }
    return 0;
}




sh-4.2$ exit
exit

Script done on Sat 17 Oct 2020 02:03:38 AM MST
