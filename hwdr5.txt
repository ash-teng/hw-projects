Script started on Tue 17 Nov 2020 10:25:03 AM MST
[?1034hsh-4.2$ cat hwd5.c
#include <stdio.h>
#include <stdlib.h>

struct MinHeapNode {  
    char data; 
    int freq; 
    struct MinHeapNode *left; 
    struct MinHeapNode *right; 
}; 
  
struct MinHeap { 
    int size; 
    int capacity; 
    struct MinHeapNode** array; 
};

struct MinHeapNode* newNode(char data, int freq) 
{ 
    struct MinHeapNode* temp = (struct MinHeapNode*)malloc(sizeof(struct MinHeapNode));  
    temp->left = temp->right = NULL; 
    temp->data = data; 
    temp->freq = freq; 
    return temp; 
}

struct MinHeap* createMinHeap(unsigned capacity)   
{ 
    struct MinHeap* minHeap 
        = (struct MinHeap*)malloc(sizeof(struct MinHeap));  
    minHeap->size = 0; 
    minHeap->capacity = capacity;   
    minHeap->array 
        = (struct MinHeapNode**)malloc(minHeap-> 
capacity * sizeof(struct MinHeapNode*)); 
    return minHeap; 
}

void swapMinHeapNode(struct MinHeapNode** a, 
                     struct MinHeapNode** b)   
{ 
    struct MinHeapNode* t = *a; 
    *a = *b; 
    *b = t; 
}   

void minHeapify(struct MinHeap* minHeap, int i)   
{ 
    int smallest = i; 
    int left = 2 * i + 1; 
    int right = 2 * i + 2; 
    if (left < minHeap->size && minHeap->array[left]-> 
freq < minHeap->array[smallest]->freq) 
        smallest = left; 
    if (right < minHeap->size && minHeap->array[right]-> 
freq < minHeap->array[smallest]->freq) 
        smallest = right; 
    if (smallest != i) { 
        swapMinHeapNode(&minHeap->array[smallest], 
                        &minHeap->array[i]); 
        minHeapify(minHeap, smallest); 
    } 
}

int isSizeOne(struct MinHeap* minHeap) 
{ 
    return (minHeap->size == 1); 
}

struct MinHeapNode* extractMin(struct MinHeap* minHeap) 
{ 
    struct MinHeapNode* temp = minHeap->array[0]; 
    minHeap->array[0] 
        = minHeap->array[minHeap->size - 1]; 
    --minHeap->size; 
    minHeapify(minHeap, 0); 
    return temp; 
}

void insertMinHeap(struct MinHeap* minHeap, 
                   struct MinHeapNode* minHeapNode) 
{ 
    ++minHeap->size; 
    int i = minHeap->size - 1; 
    while (i && minHeapNode->freq < minHeap->array[(i - 1) / 2]->freq)
    { 
        minHeap->array[i] = minHeap->array[(i - 1) / 2]; 
        i = (i - 1) / 2; 
    } 
    minHeap->array[i] = minHeapNode; 
}

void buildMinHeap(struct MinHeap* minHeap) 
{ 
    int n = minHeap->size - 1; 
    int i; 
    for (i = (n - 1) / 2; i >= 0; --i) 
        minHeapify(minHeap, i); 
}

void printArr(int arr[], int n) 
{ 
    int i; 
    for (i = 0; i < n; ++i) 
        printf("%d", arr[i]); 
    printf("\n"); 
}

struct MinHeap* createAndBuildMinHeap(char data[], int freq[], int size)  
{ 
    int i; 
    struct MinHeap* minHeap = createMinHeap(size);  
    for (i = 0; i < size; ++i) 
        minHeap->array[i] = newNode(data[i], freq[i]); 
    minHeap->size = size; 
    buildMinHeap(minHeap); 
    return minHeap; 
}  

struct MinHeapNode* buildHuffmanTree(char data[], int freq[], int size)  
{ 
    struct MinHeapNode *left, *right, *top; 
    struct MinHeap* minHeap = createAndBuildMinHeap(data, freq, size); 
    while (!isSizeOne(minHeap))
     { 
        left = extractMin(minHeap); 
        right = extractMin(minHeap); 
        top = newNode('$', left->freq + right->freq); 
        top->left = left; 
        top->right = right; 
        insertMinHeap(minHeap, top); 
    }
    return extractMin(minHeap); 
}

int isLeaf(struct MinHeapNode* root)   
{ 
    return !(root->left) && !(root->right); 
} 

void printCodes(struct MinHeapNode* root, int arr[], int top) 
{ 
    if (root->left) 
    {   
        arr[top] = 0; 
        printCodes(root->left, arr, top + 1); 
    }   
    if (root->right)
    { 
        arr[top] = 1; 
        printCodes(root->right, arr, top + 1); 
    } 
    if (isLeaf(root)) 
    { 
        printf("%c: ", root->data); 
        printArr(arr, top); 
    } 
}

void HuffmanCodes(char data[], int freq[], int size) 
{ 
    struct MinHeapNode* root 
        = buildHuffmanTree(data, freq, size); 
    int arr[100], top = 0;   
    printCodes(root, arr, top); 
} 

void inordertraversal(struct MinHeapNode* root)
{
    if (root == NULL)
      return;
    inordertraversal(root->left);
    printf("%d, %c\n", root->freq, root->data);
    inordertraversal(root->right);
}

void preordertraversal(struct MinHeapNode* root)
{
    if (root == NULL)
      return;
    printf("%d, %c\n", root->freq, root->data);
    preordertraversal(root->left);
    preordertraversal(root->right);
}


int main()
{  
    char i;
    char garbage;
    int j = 0;
    int x = 0;
    int k[256] = {};
    char z[256] = {};
     while (i != '$')
    { 
      printf("Enter a character (enter a '$' to quit entering characters): ");
      scanf("%c", &i);
      while (scanf("%c", &garbage) != 0 && garbage != '\n');
      if (i != '$' && i != '\n')
      {
        printf("Enter '%c''s frequency: " , i);
        scanf("%d", &j);
        while (scanf("%c", &garbage) != 0 && garbage != '\n');
        k[x] = j;
        z[x] = i;
        x++;
      }
    }
    struct MinHeapNode* root = buildHuffmanTree(z, k, x);
    printf("The nodes of the Huffman tree in In-order are: \n");
    inordertraversal(root);
    printf("The nodes of the Huffman tree in Pre-order are: \n");
    preordertraversal(root);
    HuffmanCodes(z, k, x);
    return 0;
  
    

}


sh-4.2$ exit
exit

Script done on Tue 17 Nov 2020 10:25:19 AM MST
